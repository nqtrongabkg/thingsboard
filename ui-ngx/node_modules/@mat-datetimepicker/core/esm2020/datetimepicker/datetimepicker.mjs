import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, NgZone, Optional, Output, ViewChild, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import { MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';
import { MatDialog } from '@angular/material/dialog';
import { Subject, Subscription } from 'rxjs';
import { first } from 'rxjs/operators';
import { DatetimeAdapter } from '../adapter/datetime-adapter';
import { MatDatetimepickerCalendarComponent, } from './calendar';
import { createMissingDateImplError } from './datetimepicker-errors';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "./calendar";
import * as i3 from "@angular/material/dialog";
import * as i4 from "@angular/cdk/overlay";
import * as i5 from "../adapter/datetime-adapter";
import * as i6 from "@angular/cdk/bidi";
/** Used to generate a unique ID for each datepicker instance. */
let datetimepickerUid = 0;
/**
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * MatCalendar directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * @docs-private
 */
export class MatDatetimepickerContentComponent {
    ngAfterContentInit() {
        this._calendar._focusActiveCell();
    }
    onSelectionChange(date) {
        this.datetimepicker._select(date);
        this.datetimepicker.close();
    }
    /**
     * Handles keydown event on datepicker content.
     * @param event The event.
     */
    _handleKeydown(event) {
        if (event.keyCode === ESCAPE) {
            this.datetimepicker.close();
            event.preventDefault();
            event.stopPropagation();
        }
    }
}
/** @nocollapse */ MatDatetimepickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: MatDatetimepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MatDatetimepickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.3", type: MatDatetimepickerContentComponent, selector: "mat-datetimepicker-content", host: { listeners: { "keydown": "_handleKeydown($event)" }, properties: { "class.mat-datetimepicker-content-touch": "datetimepicker?.touchUi" }, classAttribute: "mat-datetimepicker-content" }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: MatDatetimepickerCalendarComponent, descendants: true, static: true }], ngImport: i0, template: "<mat-datetimepicker-calendar\n  (_userSelection)=\"datetimepicker.close()\"\n  (selectedChange)=\"onSelectionChange($event)\"\n  (viewChanged)=\"datetimepicker._viewChanged($event)\"\n  [ariaNextMonthLabel]=\"datetimepicker.ariaNextMonthLabel\"\n  [ariaNextYearLabel]=\"datetimepicker.ariaNextYearLabel\"\n  [ariaPrevMonthLabel]=\"datetimepicker.ariaPrevMonthLabel\"\n  [ariaPrevYearLabel]=\"datetimepicker.ariaPrevYearLabel\"\n  [preventSameDateTimeSelection]=\"datetimepicker.preventSameDateTimeSelection\"\n  [attr.mode]=\"datetimepicker.mode\"\n  [dateFilter]=\"datetimepicker._dateFilter\"\n  [id]=\"datetimepicker.id\"\n  [maxDate]=\"datetimepicker._maxDate\"\n  [minDate]=\"datetimepicker._minDate\"\n  [multiYearSelector]=\"datetimepicker.multiYearSelector\"\n  [selected]=\"datetimepicker._selected\"\n  [startAt]=\"datetimepicker.startAt\"\n  [startView]=\"datetimepicker.startView\"\n  [timeInterval]=\"datetimepicker.timeInterval\"\n  [twelvehour]=\"datetimepicker.twelvehour\"\n  [type]=\"datetimepicker.type\"\n  cdkTrapFocus\n  class=\"mat-typography\"\n>\n</mat-datetimepicker-calendar>\n", styles: [".mat-datetimepicker-content{box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;display:block;background-color:#fff;border-radius:2px;overflow:hidden}.mat-datetimepicker-calendar{width:296px;height:405px}.mat-datetimepicker-calendar[mode=landscape]{width:446px;height:328px}@media (min-width: 480px){.mat-datetimepicker-calendar[mode=auto]{width:446px;height:328px}}.mat-datetimepicker-content-touch{box-shadow:0 0 #0003,0 0 #00000024,0 0 #0000001f;display:block;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f}.cdk-overlay-container,.cdk-global-overlay-wrapper{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000}.cdk-overlay-backdrop{position:absolute;inset:0;z-index:1000;pointer-events:auto;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}.mat-datetimepicker-dialog .mat-dialog-container{padding:0}\n"], dependencies: [{ kind: "directive", type: i1.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "component", type: i2.MatDatetimepickerCalendarComponent, selector: "mat-datetimepicker-calendar", inputs: ["multiYearSelector", "startView", "twelvehour", "timeInterval", "dateFilter", "ariaLabel", "ariaNextMonthLabel", "ariaPrevMonthLabel", "ariaNextYearLabel", "ariaPrevYearLabel", "ariaNextMultiYearLabel", "ariaPrevMultiYearLabel", "preventSameDateTimeSelection", "type", "startAt", "selected", "minDate", "maxDate"], outputs: ["_userSelection", "selectedChange", "viewChanged"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: MatDatetimepickerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mat-datetimepicker-content', host: {
                        class: 'mat-datetimepicker-content',
                        '[class.mat-datetimepicker-content-touch]': 'datetimepicker?.touchUi',
                        '(keydown)': '_handleKeydown($event)',
                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-datetimepicker-calendar\n  (_userSelection)=\"datetimepicker.close()\"\n  (selectedChange)=\"onSelectionChange($event)\"\n  (viewChanged)=\"datetimepicker._viewChanged($event)\"\n  [ariaNextMonthLabel]=\"datetimepicker.ariaNextMonthLabel\"\n  [ariaNextYearLabel]=\"datetimepicker.ariaNextYearLabel\"\n  [ariaPrevMonthLabel]=\"datetimepicker.ariaPrevMonthLabel\"\n  [ariaPrevYearLabel]=\"datetimepicker.ariaPrevYearLabel\"\n  [preventSameDateTimeSelection]=\"datetimepicker.preventSameDateTimeSelection\"\n  [attr.mode]=\"datetimepicker.mode\"\n  [dateFilter]=\"datetimepicker._dateFilter\"\n  [id]=\"datetimepicker.id\"\n  [maxDate]=\"datetimepicker._maxDate\"\n  [minDate]=\"datetimepicker._minDate\"\n  [multiYearSelector]=\"datetimepicker.multiYearSelector\"\n  [selected]=\"datetimepicker._selected\"\n  [startAt]=\"datetimepicker.startAt\"\n  [startView]=\"datetimepicker.startView\"\n  [timeInterval]=\"datetimepicker.timeInterval\"\n  [twelvehour]=\"datetimepicker.twelvehour\"\n  [type]=\"datetimepicker.type\"\n  cdkTrapFocus\n  class=\"mat-typography\"\n>\n</mat-datetimepicker-calendar>\n", styles: [".mat-datetimepicker-content{box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;display:block;background-color:#fff;border-radius:2px;overflow:hidden}.mat-datetimepicker-calendar{width:296px;height:405px}.mat-datetimepicker-calendar[mode=landscape]{width:446px;height:328px}@media (min-width: 480px){.mat-datetimepicker-calendar[mode=auto]{width:446px;height:328px}}.mat-datetimepicker-content-touch{box-shadow:0 0 #0003,0 0 #00000024,0 0 #0000001f;display:block;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f}.cdk-overlay-container,.cdk-global-overlay-wrapper{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000}.cdk-overlay-backdrop{position:absolute;inset:0;z-index:1000;pointer-events:auto;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}.mat-datetimepicker-dialog .mat-dialog-container{padding:0}\n"] }]
        }], propDecorators: { _calendar: [{
                type: ViewChild,
                args: [MatDatetimepickerCalendarComponent, { static: true }]
            }] } });
export class MatDatetimepickerComponent {
    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
        this._dialog = _dialog;
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._scrollStrategy = _scrollStrategy;
        this._dateAdapter = _dateAdapter;
        this._dir = _dir;
        this._document = _document;
        /** Active multi year view when click on year. */
        this.multiYearSelector = false;
        /** if true change the clock to 12 hour format. */
        this.twelvehour = false;
        /** The view that the calendar should start in. */
        this.startView = 'month';
        this.mode = 'auto';
        this.timeInterval = 1;
        this.ariaNextMonthLabel = 'Next month';
        this.ariaPrevMonthLabel = 'Previous month';
        this.ariaNextYearLabel = 'Next year';
        this.ariaPrevYearLabel = 'Previous year';
        /** Prevent user to select same date time */
        this.preventSameDateTimeSelection = false;
        /**
         * Emits new selected date when selected date changes.
         * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.
         */
        this.selectedChanged = new EventEmitter();
        /** Emits when the datepicker has been opened. */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.openedStream = new EventEmitter();
        /** Emits when the datepicker has been closed. */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.closedStream = new EventEmitter();
        /** Emits when the view has been changed. **/
        this.viewChanged = new EventEmitter();
        /** Whether the calendar is open. */
        this.opened = false;
        /** The id for the datepicker calendar. */
        this.id = `mat-datetimepicker-${datetimepickerUid++}`;
        /** Emits when the datepicker is disabled. */
        this._disabledChange = new Subject();
        this._validSelected = null;
        /** The element that was focused before the datepicker was opened. */
        this._focusedElementBeforeOpen = null;
        this._inputSubscription = Subscription.EMPTY;
        this._type = 'date';
        this._touchUi = false;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    /** The date to open the calendar to initially. */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return (this._startAt ||
            (this._datepickerInput ? this._datepickerInput.value : null));
    }
    set startAt(date) {
        this._startAt = this._dateAdapter.getValidDateOrNull(date);
    }
    get openOnFocus() {
        return this._openOnFocus;
    }
    set openOnFocus(value) {
        this._openOnFocus = coerceBooleanProperty(value);
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || 'date';
    }
    /**
     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
     * than a popup and elements have more padding to allow for bigger touch targets.
     */
    get touchUi() {
        return this._touchUi;
    }
    set touchUi(value) {
        this._touchUi = coerceBooleanProperty(value);
    }
    /** Whether the datepicker pop-up should be disabled. */
    get disabled() {
        return this._disabled === undefined && this._datepickerInput
            ? this._datepickerInput.disabled
            : !!this._disabled;
    }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._disabledChange.next(newValue);
        }
    }
    /** The currently selected date. */
    get _selected() {
        return this._validSelected;
    }
    set _selected(value) {
        this._validSelected = value;
    }
    /** The minimum selectable date. */
    get _minDate() {
        return this._datepickerInput && this._datepickerInput.min;
    }
    /** The maximum selectable date. */
    get _maxDate() {
        return this._datepickerInput && this._datepickerInput.max;
    }
    get _dateFilter() {
        return this._datepickerInput && this._datepickerInput._dateFilter;
    }
    _handleFocus() {
        if (!this.opened && this.openOnFocus) {
            this.open();
        }
    }
    _viewChanged(type) {
        this.viewChanged.emit(type);
    }
    ngOnDestroy() {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
        }
    }
    /** Selects the given date */
    _select(date) {
        const oldValue = this._selected;
        this._selected = date;
        if (!this._dateAdapter.sameDatetime(oldValue, this._selected)) {
            this.selectedChanged.emit(date);
        }
    }
    /**
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    _registerInput(input) {
        if (this._datepickerInput) {
            throw Error('A MatDatepicker can only be associated with a single input.');
        }
        this._datepickerInput = input;
        this._inputSubscription = this._datepickerInput._valueChange.subscribe((value) => (this._selected = value));
    }
    /** Open the calendar. */
    open() {
        if (this.opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error('Attempted to open an MatDatepicker with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this.touchUi ? this._openAsDialog() : this._openAsPopup();
        this.opened = true;
        this.openedStream.emit();
    }
    /** Close the calendar. */
    close() {
        if (!this.opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._dialogRef) {
            this._dialogRef.close();
            this._dialogRef = null;
        }
        if (this._calendarPortal && this._calendarPortal.isAttached) {
            this._calendarPortal.detach();
        }
        const completeClose = () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this.opened) {
                this.opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this._focusedElementBeforeOpen &&
            typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    /** Open the calendar as a dialog. */
    _openAsDialog() {
        this._dialogRef = this._dialog.open(MatDatetimepickerContentComponent, {
            direction: this._dir ? this._dir.value : 'ltr',
            viewContainerRef: this._viewContainerRef,
            panelClass: 'mat-datetimepicker-dialog',
        });
        this._dialogRef.afterClosed().subscribe(() => this.close());
        this._dialogRef.componentInstance.datetimepicker = this;
    }
    /** Open the calendar as a popup. */
    _openAsPopup() {
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(MatDatetimepickerContentComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            const componentRef = this._popupRef.attach(this._calendarPortal);
            componentRef.instance.datetimepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable
                .asObservable()
                .pipe(first())
                .subscribe(() => {
                this._popupRef.updatePosition();
            });
        }
        this._popupRef.backdropClick().subscribe(() => this.close());
    }
    /** Create the popup. */
    _createPopup() {
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'mat-overlay-transparent-backdrop',
            direction: this._dir ? this._dir.value : 'ltr',
            scrollStrategy: this._scrollStrategy(),
            panelClass: 'mat-datetimepicker-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
    }
    /** Create the popup PositionStrategy. */
    _createPopupPositionStrategy() {
        return this._overlay
            .position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.mat-datetimepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
        ]);
    }
}
/** @nocollapse */ MatDatetimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: MatDatetimepickerComponent, deps: [{ token: i3.MatDialog }, { token: i4.Overlay }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: MAT_DATEPICKER_SCROLL_STRATEGY }, { token: i5.DatetimeAdapter, optional: true }, { token: i6.Directionality, optional: true }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MatDatetimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.3", type: MatDatetimepickerComponent, selector: "mat-datetimepicker", inputs: { multiYearSelector: "multiYearSelector", twelvehour: "twelvehour", startView: "startView", mode: "mode", timeInterval: "timeInterval", ariaNextMonthLabel: "ariaNextMonthLabel", ariaPrevMonthLabel: "ariaPrevMonthLabel", ariaNextYearLabel: "ariaNextYearLabel", ariaPrevYearLabel: "ariaPrevYearLabel", preventSameDateTimeSelection: "preventSameDateTimeSelection", panelClass: "panelClass", startAt: "startAt", openOnFocus: "openOnFocus", type: "type", touchUi: "touchUi", disabled: "disabled" }, outputs: { selectedChanged: "selectedChanged", openedStream: "opened", closedStream: "closed", viewChanged: "viewChanged" }, exportAs: ["matDatetimepicker"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: MatDatetimepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mat-datetimepicker',
                    exportAs: 'matDatetimepicker',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                }]
        }], ctorParameters: function () { return [{ type: i3.MatDialog }, { type: i4.Overlay }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DATEPICKER_SCROLL_STRATEGY]
                }] }, { type: i5.DatetimeAdapter, decorators: [{
                    type: Optional
                }] }, { type: i6.Directionality, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { multiYearSelector: [{
                type: Input
            }], twelvehour: [{
                type: Input
            }], startView: [{
                type: Input
            }], mode: [{
                type: Input
            }], timeInterval: [{
                type: Input
            }], ariaNextMonthLabel: [{
                type: Input
            }], ariaPrevMonthLabel: [{
                type: Input
            }], ariaNextYearLabel: [{
                type: Input
            }], ariaPrevYearLabel: [{
                type: Input
            }], preventSameDateTimeSelection: [{
                type: Input
            }], selectedChanged: [{
                type: Output
            }], panelClass: [{
                type: Input
            }], openedStream: [{
                type: Output,
                args: ['opened']
            }], closedStream: [{
                type: Output,
                args: ['closed']
            }], viewChanged: [{
                type: Output
            }], startAt: [{
                type: Input
            }], openOnFocus: [{
                type: Input
            }], type: [{
                type: Input
            }], touchUi: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,