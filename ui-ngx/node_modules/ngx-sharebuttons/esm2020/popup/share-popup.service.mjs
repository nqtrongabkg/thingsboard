import { Injectable, Injector } from '@angular/core';
import { ComponentPortal } from '@angular/cdk/portal';
import { ShareButtonsPopup } from './share-buttons-popup';
import { SHARE_POPUP_OPTIONS } from './share-buttons-popup.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class SharePopupService {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    open(config) {
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
            this._overlayRef = this._overlay.create({
                backdropClass: 'sb-backdrop',
                hasBackdrop: true,
                panelClass: '',
                positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                scrollStrategy: this._overlay.scrollStrategies.block(),
                disposeOnNavigation: true
            });
            const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
            const sharePopupRef = this._overlayRef.attach(popupComponentPortal);
            sharePopupRef.instance.overlayRef = this._overlayRef;
            if (config.hasBackdrop) {
                this._overlayRef.backdropClick().subscribe(() => this.close());
            }
        }
    }
    /**
     * Close Share Popup Overlay
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
    createInjector(dataToPass) {
        return Injector.create({
            parent: this._injector,
            providers: [
                { provide: SHARE_POPUP_OPTIONS, useValue: dataToPass }
            ]
        });
    }
}
SharePopupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService, deps: [{ token: i1.Overlay }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
SharePopupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtcG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvcG9wdXAvc3JjL3NoYXJlLXBvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQXFCLE1BQU0sNkJBQTZCLENBQUM7OztBQUdyRixNQUFNLE9BQU8saUJBQWlCO0lBSTVCLFlBQW9CLFFBQWlCLEVBQVUsU0FBbUI7UUFBOUMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVU7SUFDbEUsQ0FBQztJQUVELElBQUksQ0FBQyxNQUEwQjtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsYUFBYSxFQUFFLGFBQWE7Z0JBQzVCLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixVQUFVLEVBQUUsRUFBRTtnQkFDZCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQzNGLGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRTtnQkFDdEQsbUJBQW1CLEVBQUUsSUFBSTthQUMxQixDQUFDLENBQUM7WUFDSCxNQUFNLG9CQUFvQixHQUFHLElBQUksZUFBZSxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDdkcsTUFBTSxhQUFhLEdBQW9DLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDckcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUVyRCxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ2hFO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRU8sY0FBYyxDQUFDLFVBQTZCO1FBQ2xELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDdEIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7YUFDdkQ7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs4R0EzQ1UsaUJBQWlCO2tIQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFEN0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcclxuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XHJcbmltcG9ydCB7IFNoYXJlQnV0dG9uc1BvcHVwIH0gZnJvbSAnLi9zaGFyZS1idXR0b25zLXBvcHVwJztcclxuaW1wb3J0IHsgU0hBUkVfUE9QVVBfT1BUSU9OUywgU2hhcmVQb3B1cE9wdGlvbnMgfSBmcm9tICcuL3NoYXJlLWJ1dHRvbnMtcG9wdXAubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2hhcmVQb3B1cFNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIF9vdmVybGF5UmVmOiBPdmVybGF5UmVmO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vdmVybGF5OiBPdmVybGF5LCBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICB9XHJcblxyXG4gIG9wZW4oY29uZmlnPzogU2hhcmVQb3B1cE9wdGlvbnMpIHtcclxuICAgIGlmICghdGhpcy5fb3ZlcmxheVJlZiB8fCAhdGhpcy5fb3ZlcmxheVJlZi5oYXNBdHRhY2hlZCgpKSB7XHJcbiAgICAgIHRoaXMuX292ZXJsYXlSZWYgPSB0aGlzLl9vdmVybGF5LmNyZWF0ZSh7XHJcbiAgICAgICAgYmFja2Ryb3BDbGFzczogJ3NiLWJhY2tkcm9wJyxcclxuICAgICAgICBoYXNCYWNrZHJvcDogdHJ1ZSxcclxuICAgICAgICBwYW5lbENsYXNzOiAnJyxcclxuICAgICAgICBwb3NpdGlvblN0cmF0ZWd5OiB0aGlzLl9vdmVybGF5LnBvc2l0aW9uKCkuZ2xvYmFsKCkuY2VudGVySG9yaXpvbnRhbGx5KCkuY2VudGVyVmVydGljYWxseSgpLFxyXG4gICAgICAgIHNjcm9sbFN0cmF0ZWd5OiB0aGlzLl9vdmVybGF5LnNjcm9sbFN0cmF0ZWdpZXMuYmxvY2soKSxcclxuICAgICAgICBkaXNwb3NlT25OYXZpZ2F0aW9uOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBwb3B1cENvbXBvbmVudFBvcnRhbCA9IG5ldyBDb21wb25lbnRQb3J0YWwoU2hhcmVCdXR0b25zUG9wdXAsIG51bGwsIHRoaXMuY3JlYXRlSW5qZWN0b3IoY29uZmlnKSk7XHJcbiAgICAgIGNvbnN0IHNoYXJlUG9wdXBSZWY6IENvbXBvbmVudFJlZjxTaGFyZUJ1dHRvbnNQb3B1cD4gPSB0aGlzLl9vdmVybGF5UmVmLmF0dGFjaChwb3B1cENvbXBvbmVudFBvcnRhbCk7XHJcbiAgICAgIHNoYXJlUG9wdXBSZWYuaW5zdGFuY2Uub3ZlcmxheVJlZiA9IHRoaXMuX292ZXJsYXlSZWY7XHJcblxyXG4gICAgICBpZiAoY29uZmlnLmhhc0JhY2tkcm9wKSB7XHJcbiAgICAgICAgdGhpcy5fb3ZlcmxheVJlZi5iYWNrZHJvcENsaWNrKCkuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2xvc2UoKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb3NlIFNoYXJlIFBvcHVwIE92ZXJsYXlcclxuICAgKi9cclxuICBjbG9zZSgpIHtcclxuICAgIGlmICh0aGlzLl9vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcclxuICAgICAgdGhpcy5fb3ZlcmxheVJlZi5kZXRhY2goKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlSW5qZWN0b3IoZGF0YVRvUGFzczogU2hhcmVQb3B1cE9wdGlvbnMpOiBJbmplY3RvciB7XHJcbiAgICByZXR1cm4gSW5qZWN0b3IuY3JlYXRlKHtcclxuICAgICAgcGFyZW50OiB0aGlzLl9pbmplY3RvcixcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBTSEFSRV9QT1BVUF9PUFRJT05TLCB1c2VWYWx1ZTogZGF0YVRvUGFzcyB9XHJcbiAgICAgIF1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19