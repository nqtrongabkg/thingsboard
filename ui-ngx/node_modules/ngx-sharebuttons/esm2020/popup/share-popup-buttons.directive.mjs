import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { SHARE_BUTTONS } from 'ngx-sharebuttons';
import * as i0 from "@angular/core";
import * as i1 from "./share-popup.service";
import * as i2 from "ngx-sharebuttons";
export class SharePopupButtonsDirective {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.include = Object.keys(SHARE_BUTTONS);
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
        this._popupClosed = this.popupClosed.subscribe(() => this.close());
    }
    onClick(e) {
        this._sharePopup.open({
            theme: this.theme,
            include: this.include,
            exclude: this.exclude,
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            autoSetMeta: this.autoSetMeta,
            show: this.show,
            showIcon: this.showIcon,
            showText: this.showText,
            disabled: this.disabled,
            opened: this.opened,
            closed: this.closed,
            closeIcon: this.closeIcon,
            closeClick: this.popupClosed,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
    }
    ngOnDestroy() {
        this._popupClosed.unsubscribe();
    }
    close() {
        this._sharePopup.close();
    }
}
SharePopupButtonsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupButtonsDirective, deps: [{ token: i1.SharePopupService }, { token: i2.ShareService }], target: i0.ɵɵFactoryTarget.Directive });
SharePopupButtonsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: SharePopupButtonsDirective, selector: "[shareButtonsPopup]", inputs: { theme: "theme", include: "include", exclude: "exclude", closeIcon: "closeIcon", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", showIcon: "showIcon", showText: "showText", disabled: "disabled", hasBackdrop: "hasBackdrop", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupButtonsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[shareButtonsPopup]'
                }]
        }], ctorParameters: function () { return [{ type: i1.SharePopupService }, { type: i2.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], closeIcon: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], show: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], backdropClass: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], popupClosed: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtcG9wdXAtYnV0dG9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hhcmVidXR0b25zL3BvcHVwL3NyYy9zaGFyZS1wb3B1cC1idXR0b25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoRyxPQUFPLEVBQWdCLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBSy9ELE1BQU0sT0FBTywwQkFBMEI7SUFzRHJDLFlBQW9CLFdBQThCLEVBQVUsTUFBb0I7UUFBNUQsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQXBEdkUsVUFBSyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUV6QyxZQUFPLEdBQWEsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUkvQyxjQUFTLEdBQXNCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBc0JoRSx5QkFBeUI7UUFDaEIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUV6Qix3QkFBd0I7UUFDZixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBS2pCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBSTVCLGdDQUFnQztRQUN0QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUU5QyxnQ0FBZ0M7UUFDdEIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFOUMsbURBQW1EO1FBQ3pDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUV6QyxpQkFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBR3RFLENBQUM7SUFFa0MsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQ2xDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7dUhBdkZVLDBCQUEwQjsyR0FBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBSHRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7bUlBR1UsS0FBSztzQkFBYixLQUFLO2dCQUVHLE9BQU87c0JBQWYsS0FBSztnQkFFRyxPQUFPO3NCQUFmLEtBQUs7Z0JBRUcsU0FBUztzQkFBakIsS0FBSztnQkFHRyxHQUFHO3NCQUFYLEtBQUs7Z0JBR0csS0FBSztzQkFBYixLQUFLO2dCQUdHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBR0csS0FBSztzQkFBYixLQUFLO2dCQUdHLElBQUk7c0JBQVosS0FBSztnQkFHRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLElBQUk7c0JBQVosS0FBSztnQkFHRyxRQUFRO3NCQUFoQixLQUFLO2dCQUdHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBR0csUUFBUTtzQkFBaEIsS0FBSztnQkFFRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBR0ksTUFBTTtzQkFBZixNQUFNO2dCQUdHLE1BQU07c0JBQWYsTUFBTTtnQkFHRyxXQUFXO3NCQUFwQixNQUFNO2dCQU80QixPQUFPO3NCQUF6QyxZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTaGFyZVBvcHVwU2VydmljZSB9IGZyb20gJy4vc2hhcmUtcG9wdXAuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBTaGFyZVNlcnZpY2UsIFNIQVJFX0JVVFRPTlMgfSBmcm9tICduZ3gtc2hhcmVidXR0b25zJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NoYXJlQnV0dG9uc1BvcHVwXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNoYXJlUG9wdXBCdXR0b25zRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgQElucHV0KCkgdGhlbWU6IHN0cmluZyA9IHRoaXMuX3NoYXJlLmNvbmZpZy50aGVtZTtcclxuXHJcbiAgQElucHV0KCkgaW5jbHVkZTogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhTSEFSRV9CVVRUT05TKTtcclxuXHJcbiAgQElucHV0KCkgZXhjbHVkZSE6IHN0cmluZ1tdO1xyXG5cclxuICBASW5wdXQoKSBjbG9zZUljb246IHN0cmluZyB8IHN0cmluZ1tdID0gWydmYXMnLCAndGltZXMtY2lyY2xlJ107XHJcblxyXG4gIC8qKiBUaGUgc2hhcmluZyBsaW5rICovXHJcbiAgQElucHV0KCkgdXJsOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgdGl0bGUgcGFyYW1ldGVyICovXHJcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBwYXJhbWV0ZXIgKi9cclxuICBASW5wdXQoKSBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG5cclxuICAvKiogVGhlIGltYWdlIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBQaW50ZXJlc3QgKi9cclxuICBASW5wdXQoKSBpbWFnZTogc3RyaW5nO1xyXG5cclxuICAvKiogVGhlIHRhZ3MgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFR3aXR0ZXIgYW5kIFR1bWJsciAqL1xyXG4gIEBJbnB1dCgpIHRhZ3M6IHN0cmluZztcclxuXHJcbiAgLyoqIFNldHMgbWV0YSB0YWdzIGZyb20gZG9jdW1lbnQgaGVhZCwgdXNlZnVsIHdoZW4gU0VPIGlzIGF2YWlsYWJsZSAqL1xyXG4gIEBJbnB1dCgpIGF1dG9TZXRNZXRhOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoKSBzaG93OiBudW1iZXI7XHJcblxyXG4gIC8qKiBTaG93IGJ1dHRvbnMgaWNvbnMgKi9cclxuICBASW5wdXQoKSBzaG93SWNvbiA9IHRydWU7XHJcblxyXG4gIC8qKiBTaG93IGJ1dHRvbnMgdGV4dCAqL1xyXG4gIEBJbnB1dCgpIHNob3dUZXh0ID0gZmFsc2U7XHJcblxyXG4gIC8qKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGJ1dHRvbidzIGNsaWNrIGlzIGRpc2FibGVkICovXHJcbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgpIGhhc0JhY2tkcm9wID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KCkgYmFja2Ryb3BDbGFzczogc3RyaW5nO1xyXG5cclxuICAvKiogU2hhcmUgZGlhbG9nIG9wZW5lZCBldmVudCAqL1xyXG4gIEBPdXRwdXQoKSBvcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgLyoqIFNoYXJlIGRpYWxvZyBjbG9zZWQgZXZlbnQgKi9cclxuICBAT3V0cHV0KCkgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIC8vIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIHNoYXJlIHBvcHVwIGlzIGNsb3NlZFxyXG4gIEBPdXRwdXQoKSBwb3B1cENsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgcHJpdmF0ZSBfcG9wdXBDbG9zZWQgPSB0aGlzLnBvcHVwQ2xvc2VkLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNsb3NlKCkpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zaGFyZVBvcHVwOiBTaGFyZVBvcHVwU2VydmljZSwgcHJpdmF0ZSBfc2hhcmU6IFNoYXJlU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBvbkNsaWNrKGUpIHtcclxuICAgIHRoaXMuX3NoYXJlUG9wdXAub3Blbih7XHJcbiAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxyXG4gICAgICBpbmNsdWRlOiB0aGlzLmluY2x1ZGUsXHJcbiAgICAgIGV4Y2x1ZGU6IHRoaXMuZXhjbHVkZSxcclxuICAgICAgdXJsOiB0aGlzLnVybCxcclxuICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxyXG4gICAgICBpbWFnZTogdGhpcy5pbWFnZSxcclxuICAgICAgdGFnczogdGhpcy50YWdzLFxyXG4gICAgICBhdXRvU2V0TWV0YTogdGhpcy5hdXRvU2V0TWV0YSxcclxuICAgICAgc2hvdzogdGhpcy5zaG93LFxyXG4gICAgICBzaG93SWNvbjogdGhpcy5zaG93SWNvbixcclxuICAgICAgc2hvd1RleHQ6IHRoaXMuc2hvd1RleHQsXHJcbiAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkLFxyXG4gICAgICBvcGVuZWQ6IHRoaXMub3BlbmVkLFxyXG4gICAgICBjbG9zZWQ6IHRoaXMuY2xvc2VkLFxyXG4gICAgICBjbG9zZUljb246IHRoaXMuY2xvc2VJY29uLFxyXG4gICAgICBjbG9zZUNsaWNrOiB0aGlzLnBvcHVwQ2xvc2VkLFxyXG4gICAgICBoYXNCYWNrZHJvcDogdGhpcy5oYXNCYWNrZHJvcCxcclxuICAgICAgYmFja2Ryb3BDbGFzczogdGhpcy5iYWNrZHJvcENsYXNzXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fcG9wdXBDbG9zZWQudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fc2hhcmVQb3B1cC5jbG9zZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=