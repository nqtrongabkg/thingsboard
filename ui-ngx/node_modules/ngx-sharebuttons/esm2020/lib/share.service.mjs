import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { SHARE_BUTTONS_CONFIG, SharerMethod } from './share.models';
import { SHARE_BUTTONS } from './share.defaults';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
export class ShareService {
    constructor(config, _document) {
        this._document = _document;
        /** Global config that applies on all share buttons in the app */
        this.config = {
            sharerMethod: SharerMethod.Anchor,
            sharerTarget: '_blank',
            windowObj: this._document.defaultView,
            windowFuncName: 'open',
            prop: SHARE_BUTTONS,
            theme: 'default',
            include: [],
            exclude: [],
            autoSetMeta: true,
            windowWidth: 800,
            windowHeight: 500,
            moreButtonIcon: 'ellipsis-h',
            lessButtonIcon: 'minus',
            moreButtonAriaLabel: 'Show more share buttons',
            lessButtonAriaLabel: 'Show less share buttons'
        };
        /** Stream that emits when config changes */
        this.config$ = new BehaviorSubject(this.config);
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Share buttons properties, used to get the text, color and icon of each button.
     */
    get prop() {
        return this.config.prop;
    }
    get windowSize() {
        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;
    }
    setConfig(config) {
        this.config = mergeDeep(this.config, config);
        this.config$.next(this.config);
    }
    addButton(name, props) {
        this.setConfig({
            prop: {
                [name]: props
            }
        });
    }
}
ShareService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareService, deps: [{ token: SHARE_BUTTONS_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
ShareService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SHARE_BUTTONS_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvc3JjL2xpYi9zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQWdCLG9CQUFvQixFQUFzQixZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFLcEMsTUFBTSxPQUFPLFlBQVk7SUF3QnZCLFlBQXNELE1BQTBCLEVBQTRCLFNBQWM7UUFBZCxjQUFTLEdBQVQsU0FBUyxDQUFLO1FBdEIxSCxpRUFBaUU7UUFDakUsV0FBTSxHQUF1QjtZQUMzQixZQUFZLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDakMsWUFBWSxFQUFFLFFBQVE7WUFDdEIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVztZQUNyQyxjQUFjLEVBQUUsTUFBTTtZQUN0QixJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsU0FBUztZQUNoQixPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sRUFBRSxFQUFFO1lBQ1gsV0FBVyxFQUFFLElBQUk7WUFDakIsV0FBVyxFQUFFLEdBQUc7WUFDaEIsWUFBWSxFQUFFLEdBQUc7WUFDakIsY0FBYyxFQUFFLFlBQVk7WUFDNUIsY0FBYyxFQUFFLE9BQU87WUFDdkIsbUJBQW1CLEVBQUUseUJBQXlCO1lBQzlDLG1CQUFtQixFQUFFLHlCQUF5QjtTQUMvQyxDQUFDO1FBRUYsNENBQTRDO1FBQzVDLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFHekMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxTQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBWSxZQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBYSxFQUFFLENBQUM7SUFDcEYsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUEwQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxLQUFtQjtRQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsSUFBSSxFQUFFO2dCQUNKLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSzthQUNkO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7eUdBcERVLFlBQVksa0JBd0JTLG9CQUFvQiw2QkFBc0MsUUFBUTs2R0F4QnZGLFlBQVksY0FGWCxNQUFNOzJGQUVQLFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkF5QmMsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxvQkFBb0I7OzBCQUErQixNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElTaGFyZUJ1dHRvbiwgU0hBUkVfQlVUVE9OU19DT05GSUcsIFNoYXJlQnV0dG9uc0NvbmZpZywgU2hhcmVyTWV0aG9kIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xyXG5pbXBvcnQgeyBTSEFSRV9CVVRUT05TIH0gZnJvbSAnLi9zaGFyZS5kZWZhdWx0cyc7XHJcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVTZXJ2aWNlIHtcclxuXHJcbiAgLyoqIEdsb2JhbCBjb25maWcgdGhhdCBhcHBsaWVzIG9uIGFsbCBzaGFyZSBidXR0b25zIGluIHRoZSBhcHAgKi9cclxuICBjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZyA9IHtcclxuICAgIHNoYXJlck1ldGhvZDogU2hhcmVyTWV0aG9kLkFuY2hvcixcclxuICAgIHNoYXJlclRhcmdldDogJ19ibGFuaycsXHJcbiAgICB3aW5kb3dPYmo6IHRoaXMuX2RvY3VtZW50LmRlZmF1bHRWaWV3LFxyXG4gICAgd2luZG93RnVuY05hbWU6ICdvcGVuJyxcclxuICAgIHByb3A6IFNIQVJFX0JVVFRPTlMsXHJcbiAgICB0aGVtZTogJ2RlZmF1bHQnLFxyXG4gICAgaW5jbHVkZTogW10sXHJcbiAgICBleGNsdWRlOiBbXSxcclxuICAgIGF1dG9TZXRNZXRhOiB0cnVlLFxyXG4gICAgd2luZG93V2lkdGg6IDgwMCxcclxuICAgIHdpbmRvd0hlaWdodDogNTAwLFxyXG4gICAgbW9yZUJ1dHRvbkljb246ICdlbGxpcHNpcy1oJyxcclxuICAgIGxlc3NCdXR0b25JY29uOiAnbWludXMnLFxyXG4gICAgbW9yZUJ1dHRvbkFyaWFMYWJlbDogJ1Nob3cgbW9yZSBzaGFyZSBidXR0b25zJyxcclxuICAgIGxlc3NCdXR0b25BcmlhTGFiZWw6ICdTaG93IGxlc3Mgc2hhcmUgYnV0dG9ucydcclxuICB9O1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBjb25maWcgY2hhbmdlcyAqL1xyXG4gIGNvbmZpZyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMuY29uZmlnKTtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChTSEFSRV9CVVRUT05TX0NPTkZJRykgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnkpIHtcclxuICAgIGlmIChjb25maWcpIHtcclxuICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNoYXJlIGJ1dHRvbnMgcHJvcGVydGllcywgdXNlZCB0byBnZXQgdGhlIHRleHQsIGNvbG9yIGFuZCBpY29uIG9mIGVhY2ggYnV0dG9uLlxyXG4gICAqL1xyXG4gIGdldCBwcm9wKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3A7XHJcbiAgfVxyXG5cclxuICBnZXQgd2luZG93U2l6ZSgpIHtcclxuICAgIHJldHVybiBgd2lkdGg9JHsgdGhpcy5jb25maWcud2luZG93V2lkdGggfSwgaGVpZ2h0PSR7IHRoaXMuY29uZmlnLndpbmRvd0hlaWdodCB9YDtcclxuICB9XHJcblxyXG4gIHNldENvbmZpZyhjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZykge1xyXG4gICAgdGhpcy5jb25maWcgPSBtZXJnZURlZXAodGhpcy5jb25maWcsIGNvbmZpZyk7XHJcbiAgICB0aGlzLmNvbmZpZyQubmV4dCh0aGlzLmNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBhZGRCdXR0b24obmFtZTogc3RyaW5nLCBwcm9wczogSVNoYXJlQnV0dG9uKSB7XHJcbiAgICB0aGlzLnNldENvbmZpZyh7XHJcbiAgICAgIHByb3A6IHtcclxuICAgICAgICBbbmFtZV06IHByb3BzXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19