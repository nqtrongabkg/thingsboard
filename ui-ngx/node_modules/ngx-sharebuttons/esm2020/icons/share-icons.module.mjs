import { NgModule } from '@angular/core';
import { faFacebookF, faFacebookMessenger, faLine, faLinkedinIn, faMix, faPinterestP, faRedditAlien, faTelegramPlane, faTumblr, faTwitter, faViber, faVk, faWhatsapp, faXing } from '@fortawesome/free-brands-svg-icons';
import { faCheck, faEllipsisH, faEnvelope, faExclamation, faLink, faMinus, faPrint, faSms } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import * as i0 from "@angular/core";
import * as i1 from "@fortawesome/angular-fontawesome";
const shareIcons = [
    faFacebookF, faTwitter, faLinkedinIn, faPinterestP, faRedditAlien, faTumblr,
    faWhatsapp, faViber, faVk, faFacebookMessenger, faTelegramPlane, faMix, faXing, faSms,
    faEnvelope, faCheck, faPrint, faExclamation, faLink, faEllipsisH, faMinus, faLine
];
export class ShareIconsModule {
    constructor(iconLibrary) {
        iconLibrary.addIcons(...shareIcons);
    }
}
ShareIconsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareIconsModule, deps: [{ token: i1.FaIconLibrary }], target: i0.ɵɵFactoryTarget.NgModule });
ShareIconsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: ShareIconsModule, imports: [FontAwesomeModule] });
ShareIconsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareIconsModule, imports: [FontAwesomeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        FontAwesomeModule,
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.FaIconLibrary }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtaWNvbnMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9pY29ucy9zcmMvc2hhcmUtaWNvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQzNFLGFBQWEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQ3ZGLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVySSxPQUFPLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQUdwRixNQUFNLFVBQVUsR0FBcUI7SUFDbkMsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRO0lBQzNFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUs7SUFDckYsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU07Q0FDbEYsQ0FBQztBQU9GLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFBWSxXQUEwQjtRQUNwQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7NkdBSFUsZ0JBQWdCOzhHQUFoQixnQkFBZ0IsWUFIekIsaUJBQWlCOzhHQUdSLGdCQUFnQixZQUh6QixpQkFBaUI7MkZBR1IsZ0JBQWdCO2tCQUw1QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxpQkFBaUI7cUJBQ2xCO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBmYUZhY2Vib29rRiwgZmFGYWNlYm9va01lc3NlbmdlciwgZmFMaW5lLCBmYUxpbmtlZGluSW4sIGZhTWl4LCBmYVBpbnRlcmVzdFAsXHJcbiAgZmFSZWRkaXRBbGllbiwgZmFUZWxlZ3JhbVBsYW5lLCBmYVR1bWJsciwgZmFUd2l0dGVyLCBmYVZpYmVyLCBmYVZrLCBmYVdoYXRzYXBwLCBmYVhpbmdcclxufSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zJztcclxuaW1wb3J0IHsgZmFDaGVjaywgZmFFbGxpcHNpc0gsIGZhRW52ZWxvcGUsIGZhRXhjbGFtYXRpb24sIGZhTGluaywgZmFNaW51cywgZmFQcmludCwgZmFTbXMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMnO1xyXG5cclxuaW1wb3J0IHsgRmFJY29uTGlicmFyeSwgRm9udEF3ZXNvbWVNb2R1bGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvYW5ndWxhci1mb250YXdlc29tZSc7XHJcbmltcG9ydCB7IEljb25EZWZpbml0aW9uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlJztcclxuXHJcbmNvbnN0IHNoYXJlSWNvbnM6IEljb25EZWZpbml0aW9uW10gPSBbXHJcbiAgZmFGYWNlYm9va0YsIGZhVHdpdHRlciwgZmFMaW5rZWRpbkluLCBmYVBpbnRlcmVzdFAsIGZhUmVkZGl0QWxpZW4sIGZhVHVtYmxyLFxyXG4gIGZhV2hhdHNhcHAsIGZhVmliZXIsIGZhVmssIGZhRmFjZWJvb2tNZXNzZW5nZXIsIGZhVGVsZWdyYW1QbGFuZSwgZmFNaXgsIGZhWGluZywgZmFTbXMsXHJcbiAgZmFFbnZlbG9wZSwgZmFDaGVjaywgZmFQcmludCwgZmFFeGNsYW1hdGlvbiwgZmFMaW5rLCBmYUVsbGlwc2lzSCwgZmFNaW51cywgZmFMaW5lXHJcbl07XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIEZvbnRBd2Vzb21lTW9kdWxlLFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFNoYXJlSWNvbnNNb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKGljb25MaWJyYXJ5OiBGYUljb25MaWJyYXJ5KSB7XHJcbiAgICBpY29uTGlicmFyeS5hZGRJY29ucyguLi5zaGFyZUljb25zKTtcclxuICB9XHJcbn1cclxuIl19