import * as i0 from '@angular/core';
import { InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, Injector, Injectable, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i2$1 from 'ngx-sharebuttons';
import { SHARE_BUTTONS, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import * as i5 from 'ngx-sharebuttons/buttons';
import { ShareButtonsModule } from 'ngx-sharebuttons/buttons';
import * as i1 from '@angular/cdk/a11y';
import * as i4 from '@fortawesome/angular-fontawesome';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i1$1 from '@angular/cdk/overlay';

const SHARE_POPUP_OPTIONS = new InjectionToken('SHARE_POPUP_OPTIONS');

class ShareButtonsPopup {
    constructor(_document, options, _focusTrapFactory, _elementRef) {
        this._document = _document;
        this.options = options;
        this._focusTrapFactory = _focusTrapFactory;
        this._elementRef = _elementRef;
        this._savePreviouslyFocusedElement();
    }
    get isBtnCopy() {
        return this.options.exclude && this.options.exclude.filter((btn) => btn === 'copy').length > 0;
    }
    ngAfterViewInit() {
        this._trapFocus();
    }
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy() {
        this.overlayRef.dispose();
        this._restoreFocus();
    }
    /** Moves the focus inside the focus trap. */
    _trapFocus() {
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        }
        // If were to attempt to focus immediately, then the content of the lightbox would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        this._focusTrap.focusInitialElementWhenReady();
    }
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;
            // Note that there is no focus method when rendering on the server.
            if (this._elementRef.nativeElement.focus) {
                // Move focus onto the lightbox immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then(() => this._elementRef.nativeElement.focus());
            }
        }
    }
    /** Restores focus to the element that was focused before the lightbox opened. */
    _restoreFocus() {
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
}
ShareButtonsPopup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopup, deps: [{ token: DOCUMENT, optional: true }, { token: SHARE_POPUP_OPTIONS, optional: true }, { token: i1.FocusTrapFactory }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ShareButtonsPopup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: ShareButtonsPopup, selector: "share-buttons-popup", host: { attributes: { "tabindex": "-1", "aria-modal": "true" }, properties: { "attr.role": "role", "attr.aria-labelledby": "ariaLabel ? null : ariaLabelledBy", "attr.aria-label": "ariaLabel", "attr.aria-describedby": "ariaDescribedBy || null" } }, ngImport: i0, template: "<div class=\"sb-overlay\">\r\n  <h3>Share</h3>\r\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\r\n    <span>{{ shareButton?.url }}</span>\r\n  </div>\r\n\r\n  <share-buttons [include]=\"options?.include\"\r\n                 [exclude]=\"options?.exclude\"\r\n                 [theme]=\"options?.theme\"\r\n                 [url]=\"options?.url\"\r\n                 [title]=\"options?.title\"\r\n                 [description]=\"options?.description\"\r\n                 [image]=\"options?.image\"\r\n                 [tags]=\"options?.tags\"\r\n                 [autoSetMeta]=\"options?.autoSetMeta\"\r\n                 [show]=\"options?.show\"\r\n                 [showIcon]=\"options?.showIcon\"\r\n                 [showText]=\"options?.showText\"\r\n                 (opened)=\"options?.opened?.emit($event)\"\r\n                 (closed)=\"options?.closed?.emit($event)\"\r\n                 [disabled]=\"options?.disabled\">\r\n  </share-buttons>\r\n\r\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\r\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\r\n  </div>\r\n\r\n</div>\r\n", styles: [":host,.sb-close-overlay{display:flex;justify-content:center;align-items:center}h3{margin:5px;top:5px;position:absolute}.sb-overlay{max-width:100%;max-height:100%;width:300px;display:flex;flex-direction:column;position:relative;padding:1em}::ng-deep share-buttons-popup{position:relative;display:block;background:white;max-width:94vw;max-height:90vh;border-radius:16px;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{margin-top:30px;display:block;width:100%;height:100%}::ng-deep .sb-backdrop{background-color:#00000052}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{max-width:unset;max-height:unset;position:fixed;inset:0;height:100%;width:100%;border-radius:0}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width: 480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{max-width:unset;max-height:unset;position:fixed;inset:0;height:100%;width:100%;border-radius:0}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;position:absolute;margin:5px;right:0;top:0;z-index:60;cursor:pointer;width:40px;height:40px;font-size:20px}@media only screen and (max-width: 480px){::ng-deep .sb-close-overlay{margin:2px}}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ShareDirective, selector: "[shareButton]", inputs: ["shareButton", "autoSetMeta", "url", "title", "description", "image", "tags"], outputs: ["opened", "closed"], exportAs: ["shareButton"] }, { kind: "component", type: i4.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "component", type: i5.ShareButtons, selector: "share-buttons", inputs: ["theme", "include", "exclude", "show", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "disabled"], outputs: ["opened", "closed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopup, decorators: [{
            type: Component,
            args: [{ selector: 'share-buttons-popup', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        'tabindex': '-1',
                        'aria-modal': 'true',
                        '[attr.role]': 'role',
                        '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',
                        '[attr.aria-label]': 'ariaLabel',
                        '[attr.aria-describedby]': 'ariaDescribedBy || null'
                    }, template: "<div class=\"sb-overlay\">\r\n  <h3>Share</h3>\r\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\r\n    <span>{{ shareButton?.url }}</span>\r\n  </div>\r\n\r\n  <share-buttons [include]=\"options?.include\"\r\n                 [exclude]=\"options?.exclude\"\r\n                 [theme]=\"options?.theme\"\r\n                 [url]=\"options?.url\"\r\n                 [title]=\"options?.title\"\r\n                 [description]=\"options?.description\"\r\n                 [image]=\"options?.image\"\r\n                 [tags]=\"options?.tags\"\r\n                 [autoSetMeta]=\"options?.autoSetMeta\"\r\n                 [show]=\"options?.show\"\r\n                 [showIcon]=\"options?.showIcon\"\r\n                 [showText]=\"options?.showText\"\r\n                 (opened)=\"options?.opened?.emit($event)\"\r\n                 (closed)=\"options?.closed?.emit($event)\"\r\n                 [disabled]=\"options?.disabled\">\r\n  </share-buttons>\r\n\r\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\r\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\r\n  </div>\r\n\r\n</div>\r\n", styles: [":host,.sb-close-overlay{display:flex;justify-content:center;align-items:center}h3{margin:5px;top:5px;position:absolute}.sb-overlay{max-width:100%;max-height:100%;width:300px;display:flex;flex-direction:column;position:relative;padding:1em}::ng-deep share-buttons-popup{position:relative;display:block;background:white;max-width:94vw;max-height:90vh;border-radius:16px;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{margin-top:30px;display:block;width:100%;height:100%}::ng-deep .sb-backdrop{background-color:#00000052}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{max-width:unset;max-height:unset;position:fixed;inset:0;height:100%;width:100%;border-radius:0}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width: 480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{max-width:unset;max-height:unset;position:fixed;inset:0;height:100%;width:100%;border-radius:0}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;position:absolute;margin:5px;right:0;top:0;z-index:60;cursor:pointer;width:40px;height:40px;font-size:20px}@media only screen and (max-width: 480px){::ng-deep .sb-close-overlay{margin:2px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [DOCUMENT]
                    }] }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [SHARE_POPUP_OPTIONS]
                    }] }, { type: i1.FocusTrapFactory }, { type: i0.ElementRef }];
    } });

class SharePopupService {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    open(config) {
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
            this._overlayRef = this._overlay.create({
                backdropClass: 'sb-backdrop',
                hasBackdrop: true,
                panelClass: '',
                positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                scrollStrategy: this._overlay.scrollStrategies.block(),
                disposeOnNavigation: true
            });
            const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
            const sharePopupRef = this._overlayRef.attach(popupComponentPortal);
            sharePopupRef.instance.overlayRef = this._overlayRef;
            if (config.hasBackdrop) {
                this._overlayRef.backdropClick().subscribe(() => this.close());
            }
        }
    }
    /**
     * Close Share Popup Overlay
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
    createInjector(dataToPass) {
        return Injector.create({
            parent: this._injector,
            providers: [
                { provide: SHARE_POPUP_OPTIONS, useValue: dataToPass }
            ]
        });
    }
}
SharePopupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
SharePopupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }]; } });

class SharePopupButtonsDirective {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.include = Object.keys(SHARE_BUTTONS);
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
        this._popupClosed = this.popupClosed.subscribe(() => this.close());
    }
    onClick(e) {
        this._sharePopup.open({
            theme: this.theme,
            include: this.include,
            exclude: this.exclude,
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            autoSetMeta: this.autoSetMeta,
            show: this.show,
            showIcon: this.showIcon,
            showText: this.showText,
            disabled: this.disabled,
            opened: this.opened,
            closed: this.closed,
            closeIcon: this.closeIcon,
            closeClick: this.popupClosed,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
    }
    ngOnDestroy() {
        this._popupClosed.unsubscribe();
    }
    close() {
        this._sharePopup.close();
    }
}
SharePopupButtonsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupButtonsDirective, deps: [{ token: SharePopupService }, { token: i2$1.ShareService }], target: i0.ɵɵFactoryTarget.Directive });
SharePopupButtonsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: SharePopupButtonsDirective, selector: "[shareButtonsPopup]", inputs: { theme: "theme", include: "include", exclude: "exclude", closeIcon: "closeIcon", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", showIcon: "showIcon", showText: "showText", disabled: "disabled", hasBackdrop: "hasBackdrop", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupButtonsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[shareButtonsPopup]'
                }]
        }], ctorParameters: function () { return [{ type: SharePopupService }, { type: i2$1.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], closeIcon: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], show: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], backdropClass: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], popupClosed: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class SharePopupComponent {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.icon = ['fas', 'share'];
        this.text = 'Share';
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
    }
}
SharePopupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupComponent, deps: [{ token: SharePopupService }, { token: i2$1.ShareService }], target: i0.ɵɵFactoryTarget.Component });
SharePopupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: SharePopupComponent, selector: "share-popup-button", inputs: { theme: "theme", icon: "icon", text: "text", include: "include", exclude: "exclude", closeIcon: "closeIcon", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", showIcon: "showIcon", showText: "showText", disabled: "disabled", hasBackdrop: "hasBackdrop", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" }, ngImport: i0, template: `
    <div class="sb-button sb-{{theme}}">
      <button shareButtonsPopup
              class="sb-wrapper"
              [class.sb-show-icon]="showIcon"
              [class.sb-show-text]="showText"
              [theme]="theme"
              [include]="include"
              [exclude]="exclude"
              [show]="show"
              [url]="url"
              [showIcon]="showIcon"
              [showText]="showText"
              [tags]="tags"
              [autoSetMeta]="autoSetMeta"
              [title]="title"
              [description]="description"
              [image]="image"
              (closed)="closed.emit($event)"
              (opened)="opened.emit($event)">
        <div class="sb-content">

          <div *ngIf="showIcon" class="sb-icon">
            <fa-icon [icon]="icon" [fixedWidth]="true"></fa-icon>
          </div>

          <div *ngIf="showText" class="sb-text">
            {{ text }}
          </div>

        </div>
      </button>
    </div>
  `, isInline: true, styles: [":host{--button-color: #282c34}\n", ":host-context([button=facebook]){--button-color: #4267B2}:host-context([button=twitter]){--button-color: #00acee}:host-context([button=google]){--button-color: #db4437}:host-context([button=mix]){--button-color: #ff8226}:host-context([button=line]){--button-color: #00b900}:host-context([button=linkedin]){--button-color: #006fa6}:host-context([button=pinterest]){--button-color: #bd081c}:host-context([button=reddit]){--button-color: #ff4006}:host-context([button=tumblr]){--button-color: #36465d}:host-context([button=whatsapp]){--button-color: #25d366}:host-context([button=messenger]){--button-color: #0080FF}:host-context([button=telegram]){--button-color: #0088cc}:host-context([button=xing]){--button-color: #006567}:host-context([button=sms]){--button-color: #20c16c}:host-context([button=email]){--button-color: #FF961C}:host-context([button=viber]){--button-color: #665ca7}:host-context([button=vk]){--button-color: #4C75A3}:host-context([button=copy]){--button-color: #607D8B}:host-context([button=print]){--button-color: #765AA2}:host-context([button=expand]){--button-color: #FF6651}button{cursor:pointer;position:relative;outline:0;-webkit-print-color-adjust:exact;margin:var(--sb-margin, .3125em);padding:var(--sb-padding, 0);min-width:var(--sb-min-width, 4.125em);height:var(--sb-height, 2.5em);color:var(--sb-color, #fff);background:var(--sb-background);font-size:var(--sb-font-size, 13px);line-height:var(--sb-line-height, 2.571em);border:var(--sb-border);border-radius:var(--sb-border-radius);transition:var(--sb-transition);box-shadow:var(--sb-box-shadow);text-shadow:var(--sb-text-shadow);overflow:var(--sb-overflow)}.sb-icon,.sb-text{display:flex;align-items:center;justify-content:center;-webkit-user-select:none;-moz-user-select:none;user-select:none}.sb-content{flex:1;display:flex;height:100%;width:100%;position:relative}.sb-text{flex:1;height:100%;white-space:nowrap;padding:var(--sb-text-padding, 0 .7em);font-weight:var(--sb-font-weight, bold)}.sb-icon{text-align:center;width:100%;height:100%;min-width:2em;font-size:var(--sb-icon-size, 1.2em)}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }, { kind: "directive", type: SharePopupButtonsDirective, selector: "[shareButtonsPopup]", inputs: ["theme", "include", "exclude", "closeIcon", "url", "title", "description", "image", "tags", "autoSetMeta", "show", "showIcon", "showText", "disabled", "hasBackdrop", "backdropClass"], outputs: ["opened", "closed", "popupClosed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: SharePopupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'share-popup-button', template: `
    <div class="sb-button sb-{{theme}}">
      <button shareButtonsPopup
              class="sb-wrapper"
              [class.sb-show-icon]="showIcon"
              [class.sb-show-text]="showText"
              [theme]="theme"
              [include]="include"
              [exclude]="exclude"
              [show]="show"
              [url]="url"
              [showIcon]="showIcon"
              [showText]="showText"
              [tags]="tags"
              [autoSetMeta]="autoSetMeta"
              [title]="title"
              [description]="description"
              [image]="image"
              (closed)="closed.emit($event)"
              (opened)="opened.emit($event)">
        <div class="sb-content">

          <div *ngIf="showIcon" class="sb-icon">
            <fa-icon [icon]="icon" [fixedWidth]="true"></fa-icon>
          </div>

          <div *ngIf="showText" class="sb-text">
            {{ text }}
          </div>

        </div>
      </button>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{--button-color: #282c34}\n", ":host-context([button=facebook]){--button-color: #4267B2}:host-context([button=twitter]){--button-color: #00acee}:host-context([button=google]){--button-color: #db4437}:host-context([button=mix]){--button-color: #ff8226}:host-context([button=line]){--button-color: #00b900}:host-context([button=linkedin]){--button-color: #006fa6}:host-context([button=pinterest]){--button-color: #bd081c}:host-context([button=reddit]){--button-color: #ff4006}:host-context([button=tumblr]){--button-color: #36465d}:host-context([button=whatsapp]){--button-color: #25d366}:host-context([button=messenger]){--button-color: #0080FF}:host-context([button=telegram]){--button-color: #0088cc}:host-context([button=xing]){--button-color: #006567}:host-context([button=sms]){--button-color: #20c16c}:host-context([button=email]){--button-color: #FF961C}:host-context([button=viber]){--button-color: #665ca7}:host-context([button=vk]){--button-color: #4C75A3}:host-context([button=copy]){--button-color: #607D8B}:host-context([button=print]){--button-color: #765AA2}:host-context([button=expand]){--button-color: #FF6651}button{cursor:pointer;position:relative;outline:0;-webkit-print-color-adjust:exact;margin:var(--sb-margin, .3125em);padding:var(--sb-padding, 0);min-width:var(--sb-min-width, 4.125em);height:var(--sb-height, 2.5em);color:var(--sb-color, #fff);background:var(--sb-background);font-size:var(--sb-font-size, 13px);line-height:var(--sb-line-height, 2.571em);border:var(--sb-border);border-radius:var(--sb-border-radius);transition:var(--sb-transition);box-shadow:var(--sb-box-shadow);text-shadow:var(--sb-text-shadow);overflow:var(--sb-overflow)}.sb-icon,.sb-text{display:flex;align-items:center;justify-content:center;-webkit-user-select:none;-moz-user-select:none;user-select:none}.sb-content{flex:1;display:flex;height:100%;width:100%;position:relative}.sb-text{flex:1;height:100%;white-space:nowrap;padding:var(--sb-text-padding, 0 .7em);font-weight:var(--sb-font-weight, bold)}.sb-icon{text-align:center;width:100%;height:100%;min-width:2em;font-size:var(--sb-icon-size, 1.2em)}\n"] }]
        }], ctorParameters: function () { return [{ type: SharePopupService }, { type: i2$1.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], icon: [{
                type: Input
            }], text: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], closeIcon: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], show: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], backdropClass: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], popupClosed: [{
                type: Output
            }] } });

/**
 * @deprecated The pop-up share buttons module is deprecated since version 12.0.0 and will be removed in v13.0.0
 */
class ShareButtonsPopupModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsPopupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ShareButtonsPopupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopupModule, declarations: [ShareButtonsPopup,
        SharePopupButtonsDirective,
        SharePopupComponent], imports: [CommonModule,
        ShareButtonsModule], exports: [ShareButtonsModule,
        ShareButtonsPopup,
        SharePopupButtonsDirective,
        SharePopupComponent] });
ShareButtonsPopupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopupModule, providers: [
        SharePopupService
    ], imports: [CommonModule,
        ShareButtonsModule, ShareButtonsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: ShareButtonsPopupModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ShareButtonsPopup,
                        SharePopupButtonsDirective,
                        SharePopupComponent
                    ],
                    imports: [
                        CommonModule,
                        ShareButtonsModule
                    ],
                    exports: [
                        ShareButtonsModule,
                        ShareButtonsPopup,
                        SharePopupButtonsDirective,
                        SharePopupComponent
                    ],
                    providers: [
                        SharePopupService
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SHARE_POPUP_OPTIONS, ShareButtonsPopup, ShareButtonsPopupModule, SharePopupButtonsDirective, SharePopupComponent, SharePopupService };
//# sourceMappingURL=ngx-sharebuttons-popup.mjs.map
