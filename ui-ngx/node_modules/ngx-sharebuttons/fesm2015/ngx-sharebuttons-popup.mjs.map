{"version":3,"file":"ngx-sharebuttons-popup.mjs","sources":["../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.model.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.html","../../../projects/ngx-sharebuttons/popup/src/share-popup.service.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup-buttons.directive.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup.component.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.module.ts","../../../projects/ngx-sharebuttons/popup/src/ngx-sharebuttons-popup.ts"],"sourcesContent":["import { EventEmitter, InjectionToken } from '@angular/core';\r\n\r\nexport interface SharePopupOptions {\r\n  show: number;\r\n  theme: string;\r\n  include: string[];\r\n  exclude: string[];\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  tags: string;\r\n  autoSetMeta: boolean;\r\n  showIcon: boolean;\r\n  showText: boolean;\r\n  disabled: boolean;\r\n  opened: EventEmitter<string>;\r\n  closed: EventEmitter<string>;\r\n  closeIcon?: string | string[];\r\n  closeClick: EventEmitter<void>;\r\n  hasBackdrop?: boolean;\r\n  backdropClass?: string;\r\n}\r\n\r\nexport const SHARE_POPUP_OPTIONS = new InjectionToken<SharePopupOptions>('SHARE_POPUP_OPTIONS');\r\n","import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\r\n\r\n@Component({\r\n  selector: 'share-buttons-popup',\r\n  templateUrl: './share-buttons-popup.html',\r\n  styleUrls: ['./share-buttons-popup.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'tabindex': '-1',\r\n    'aria-modal': 'true',\r\n    '[attr.role]': 'role',\r\n    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    '[attr.aria-describedby]': 'ariaDescribedBy || null'\r\n  }\r\n})\r\nexport class ShareButtonsPopup implements AfterViewInit, OnDestroy {\r\n\r\n  /** Overlay ref to close the lightbox */\r\n  overlayRef: OverlayRef;\r\n\r\n  /** The ARIA role of the lightbox element. */\r\n  role: string;\r\n\r\n  /** Aria label to assign to the lightbox element */\r\n  ariaLabel: string;\r\n\r\n  /** ID of the element that should be considered as the lightbox's label. */\r\n  ariaLabelledBy: string;\r\n\r\n  /** ID of the element that describes the lightbox. */\r\n  ariaDescribedBy: string;\r\n\r\n  /** The class that traps and manages focus within the lightbox. */\r\n  private _focusTrap: FocusTrap;\r\n\r\n  /** Element that was focused before the lightbox was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement;\r\n\r\n  get isBtnCopy(): boolean {\r\n    return this.options.exclude && this.options.exclude.filter((btn: string) => btn === 'copy').length > 0;\r\n  }\r\n\r\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\r\n              @Optional() @Inject(SHARE_POPUP_OPTIONS) public options: SharePopupOptions,\r\n              private _focusTrapFactory: FocusTrapFactory,\r\n              private _elementRef: ElementRef) {\r\n    this._savePreviouslyFocusedElement();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._trapFocus();\r\n  }\r\n\r\n  /** Callback, invoked whenever an animation on the host completes. */\r\n  ngOnDestroy() {\r\n    this.overlayRef.dispose();\r\n    this._restoreFocus();\r\n  }\r\n\r\n  /** Moves the focus inside the focus trap. */\r\n  private _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n    // If were to attempt to focus immediately, then the content of the lightbox would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    this._focusTrap.focusInitialElementWhenReady();\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the lightbox was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Note that there is no focus method when rendering on the server.\r\n      if (this._elementRef.nativeElement.focus) {\r\n        // Move focus onto the lightbox immediately in order to prevent the user from accidentally\r\n        // opening multiple dialogs at the same time. Needs to be async, because the element\r\n        // may not be focusable immediately.\r\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Restores focus to the element that was focused before the lightbox opened. */\r\n  private _restoreFocus() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n}\r\n","<div class=\"sb-overlay\">\r\n  <h3>Share</h3>\r\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\r\n    <span>{{ shareButton?.url }}</span>\r\n  </div>\r\n\r\n  <share-buttons [include]=\"options?.include\"\r\n                 [exclude]=\"options?.exclude\"\r\n                 [theme]=\"options?.theme\"\r\n                 [url]=\"options?.url\"\r\n                 [title]=\"options?.title\"\r\n                 [description]=\"options?.description\"\r\n                 [image]=\"options?.image\"\r\n                 [tags]=\"options?.tags\"\r\n                 [autoSetMeta]=\"options?.autoSetMeta\"\r\n                 [show]=\"options?.show\"\r\n                 [showIcon]=\"options?.showIcon\"\r\n                 [showText]=\"options?.showText\"\r\n                 (opened)=\"options?.opened?.emit($event)\"\r\n                 (closed)=\"options?.closed?.emit($event)\"\r\n                 [disabled]=\"options?.disabled\">\r\n  </share-buttons>\r\n\r\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\r\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\r\n  </div>\r\n\r\n</div>\r\n","import { ComponentRef, Injectable, Injector } from '@angular/core';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { ShareButtonsPopup } from './share-buttons-popup';\r\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\r\n\r\n@Injectable()\r\nexport class SharePopupService {\r\n\r\n  private _overlayRef: OverlayRef;\r\n\r\n  constructor(private _overlay: Overlay, private _injector: Injector) {\r\n  }\r\n\r\n  open(config?: SharePopupOptions) {\r\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\r\n      this._overlayRef = this._overlay.create({\r\n        backdropClass: 'sb-backdrop',\r\n        hasBackdrop: true,\r\n        panelClass: '',\r\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\r\n        scrollStrategy: this._overlay.scrollStrategies.block(),\r\n        disposeOnNavigation: true\r\n      });\r\n      const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));\r\n      const sharePopupRef: ComponentRef<ShareButtonsPopup> = this._overlayRef.attach(popupComponentPortal);\r\n      sharePopupRef.instance.overlayRef = this._overlayRef;\r\n\r\n      if (config.hasBackdrop) {\r\n        this._overlayRef.backdropClick().subscribe(() => this.close());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close Share Popup Overlay\r\n   */\r\n  close() {\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n    }\r\n  }\r\n\r\n  private createInjector(dataToPass: SharePopupOptions): Injector {\r\n    return Injector.create({\r\n      parent: this._injector,\r\n      providers: [\r\n        { provide: SHARE_POPUP_OPTIONS, useValue: dataToPass }\r\n      ]\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\r\nimport { SharePopupService } from './share-popup.service';\r\n\r\nimport { ShareService, SHARE_BUTTONS } from 'ngx-sharebuttons';\r\n\r\n@Directive({\r\n  selector: '[shareButtonsPopup]'\r\n})\r\nexport class SharePopupButtonsDirective implements OnDestroy {\r\n\r\n  @Input() theme: string = this._share.config.theme;\r\n\r\n  @Input() include: string[] = Object.keys(SHARE_BUTTONS);\r\n\r\n  @Input() exclude!: string[];\r\n\r\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\r\n\r\n  /** The sharing link */\r\n  @Input() url: string;\r\n\r\n  /** The title parameter */\r\n  @Input() title: string;\r\n\r\n  /** The description parameter */\r\n  @Input() description: string;\r\n\r\n  /** The image parameter for sharing on Pinterest */\r\n  @Input() image: string;\r\n\r\n  /** The tags parameter for sharing on Twitter and Tumblr */\r\n  @Input() tags: string;\r\n\r\n  /** Sets meta tags from document head, useful when SEO is available */\r\n  @Input() autoSetMeta: boolean;\r\n\r\n  @Input() show: number;\r\n\r\n  /** Show buttons icons */\r\n  @Input() showIcon = true;\r\n\r\n  /** Show buttons text */\r\n  @Input() showText = false;\r\n\r\n  /** A flag that indicates if the button's click is disabled */\r\n  @Input() disabled: boolean;\r\n\r\n  @Input() hasBackdrop = true;\r\n\r\n  @Input() backdropClass: string;\r\n\r\n  /** Share dialog opened event */\r\n  @Output() opened = new EventEmitter<string>();\r\n\r\n  /** Share dialog closed event */\r\n  @Output() closed = new EventEmitter<string>();\r\n\r\n  // Stream that emits when the share popup is closed\r\n  @Output() popupClosed = new EventEmitter<void>();\r\n\r\n  private _popupClosed = this.popupClosed.subscribe(() => this.close());\r\n\r\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onClick(e) {\r\n    this._sharePopup.open({\r\n      theme: this.theme,\r\n      include: this.include,\r\n      exclude: this.exclude,\r\n      url: this.url,\r\n      title: this.title,\r\n      description: this.description,\r\n      image: this.image,\r\n      tags: this.tags,\r\n      autoSetMeta: this.autoSetMeta,\r\n      show: this.show,\r\n      showIcon: this.showIcon,\r\n      showText: this.showText,\r\n      disabled: this.disabled,\r\n      opened: this.opened,\r\n      closed: this.closed,\r\n      closeIcon: this.closeIcon,\r\n      closeClick: this.popupClosed,\r\n      hasBackdrop: this.hasBackdrop,\r\n      backdropClass: this.backdropClass\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._popupClosed.unsubscribe();\r\n  }\r\n\r\n  close() {\r\n    this._sharePopup.close();\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SharePopupService } from './share-popup.service';\r\n\r\nimport { ShareService } from 'ngx-sharebuttons';\r\n\r\n@Component({\r\n  selector: 'share-popup-button',\r\n  template: `\r\n    <div class=\"sb-button sb-{{theme}}\">\r\n      <button shareButtonsPopup\r\n              class=\"sb-wrapper\"\r\n              [class.sb-show-icon]=\"showIcon\"\r\n              [class.sb-show-text]=\"showText\"\r\n              [theme]=\"theme\"\r\n              [include]=\"include\"\r\n              [exclude]=\"exclude\"\r\n              [show]=\"show\"\r\n              [url]=\"url\"\r\n              [showIcon]=\"showIcon\"\r\n              [showText]=\"showText\"\r\n              [tags]=\"tags\"\r\n              [autoSetMeta]=\"autoSetMeta\"\r\n              [title]=\"title\"\r\n              [description]=\"description\"\r\n              [image]=\"image\"\r\n              (closed)=\"closed.emit($event)\"\r\n              (opened)=\"opened.emit($event)\">\r\n        <div class=\"sb-content\">\r\n\r\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\r\n            <fa-icon [icon]=\"icon\" [fixedWidth]=\"true\"></fa-icon>\r\n          </div>\r\n\r\n          <div *ngIf=\"showText\" class=\"sb-text\">\r\n            {{ text }}\r\n          </div>\r\n\r\n        </div>\r\n      </button>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./share-popup.component.scss', '../../button/src/share-button.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SharePopupComponent {\r\n\r\n  @Input() theme: string = this._share.config.theme;\r\n\r\n  @Input() icon: string | string[] = ['fas', 'share'];\r\n\r\n  @Input() text: string = 'Share';\r\n\r\n  @Input() include!: string[];\r\n\r\n  @Input() exclude!: string[];\r\n\r\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\r\n\r\n  /** The sharing link */\r\n  @Input() url: string;\r\n\r\n  /** The title parameter */\r\n  @Input() title: string;\r\n\r\n  /** The description parameter */\r\n  @Input() description: string;\r\n\r\n  /** The image parameter for sharing on Pinterest */\r\n  @Input() image: string;\r\n\r\n  /** The tags parameter for sharing on Twitter and Tumblr */\r\n  @Input() tags: string;\r\n\r\n  /** Sets meta tags from document head, useful when SEO is available */\r\n  @Input() autoSetMeta: boolean;\r\n\r\n  @Input() show: number;\r\n\r\n  /** Show buttons icons */\r\n  @Input() showIcon = true;\r\n\r\n  /** Show buttons text */\r\n  @Input() showText = false;\r\n\r\n  /** A flag that indicates if the button's click is disabled */\r\n  @Input() disabled: boolean;\r\n\r\n  @Input() hasBackdrop = true;\r\n\r\n  @Input() backdropClass: string;\r\n\r\n  /** Share dialog opened event */\r\n  @Output() opened = new EventEmitter<string>();\r\n\r\n  /** Share dialog closed event */\r\n  @Output() closed = new EventEmitter<string>();\r\n\r\n  // Stream that emits when the share popup is closed\r\n  @Output() popupClosed = new EventEmitter<void>();\r\n\r\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';\r\nimport { ShareButtonsModule } from 'ngx-sharebuttons/buttons';\r\n\r\nimport { ShareButtonsPopup } from './share-buttons-popup';\r\nimport { SharePopupService } from './share-popup.service';\r\nimport { SharePopupButtonsDirective } from './share-popup-buttons.directive';\r\nimport { SharePopupComponent } from './share-popup.component';\r\n\r\n/**\r\n * @deprecated The pop-up share buttons module is deprecated since version 12.0.0 and will be removed in v13.0.0\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    ShareButtonsPopup,\r\n    SharePopupButtonsDirective,\r\n    SharePopupComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ShareButtonsModule\r\n  ],\r\n  exports: [\r\n    ShareButtonsModule,\r\n    ShareButtonsPopup,\r\n    SharePopupButtonsDirective,\r\n    SharePopupComponent\r\n  ],\r\n  providers: [\r\n    SharePopupService\r\n  ]\r\n})\r\nexport class ShareButtonsPopupModule {\r\n  static withConfig(config?: ShareButtonsConfig): ModuleWithProviders<ShareButtonsModule> {\r\n    return {\r\n      ngModule: ShareButtonsModule,\r\n      providers: [{provide: SHARE_BUTTONS_CONFIG, useValue: config}]\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i3","i1","i1.SharePopupService","i2","i5.SharePopupButtonsDirective"],"mappings":"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"}