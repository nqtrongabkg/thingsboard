import { Directive, Inject, Input, PLATFORM_ID } from '@angular/core';
import { fromEvent, merge, ReplaySubject, Subject } from 'rxjs';
import { map, shareReplay, startWith, switchMap } from 'rxjs/operators';
import { FlowInjectionToken } from './flow-injection-token';
import { flowFile2Transfer } from './helpers/flow-file-to-transfer';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
export class FlowDirective {
    constructor(flowConstructor, platform) {
        this.flowConstructor = flowConstructor;
        this.platform = platform;
        this.flow$ = new ReplaySubject(1);
        this.pauseOrResumeEvent$ = new Subject();
        this.events$ = this.flow$.pipe(switchMap((flow) => merge(this.flowEvents(flow), this.ngxFlowEvents())));
        this.transfers$ = this.events$.pipe(map((_) => this.flowJs.files), map((files = []) => ({
            transfers: files.map((flowFile) => flowFile2Transfer(flowFile)),
            flow: this.flowJs,
            totalProgress: this.flowJs.progress(),
        })), shareReplay(1));
        this.somethingToUpload$ = this.transfers$.pipe(map((state) => state.transfers.some((file) => !file.success), startWith(false)));
    }
    set flowConfig(options) {
        if (isPlatformBrowser(this.platform)) {
            this.flowJs = new this.flowConstructor(options);
            this.flow$.next(this.flowJs);
        }
    }
    flowEvents(flow) {
        const events = [
            this.listenForEvent(flow, 'fileSuccess'),
            this.listenForEvent(flow, 'fileProgress'),
            this.listenForEvent(flow, 'fileAdded'),
            this.listenForEvent(flow, 'filesAdded'),
            this.listenForEvent(flow, 'filesSubmitted'),
            this.listenForEvent(flow, 'fileRemoved'),
            this.listenForEvent(flow, 'fileRetry'),
            this.listenForEvent(flow, 'fileError'),
            this.listenForEvent(flow, 'uploadStart'),
            this.listenForEvent(flow, 'complete'),
            this.listenForEvent(flow, 'progress'),
        ];
        return merge(...events);
    }
    ngxFlowEvents() {
        const pauseOrResumeEvent$ = this.pauseOrResumeEvent$.pipe(map((_) => ({
            type: 'pauseOrResume',
        })));
        const newFlowInstanceEvent$ = this.flow$.pipe(map((_) => ({
            type: 'newFlowJsInstance',
        })));
        const events = [pauseOrResumeEvent$, newFlowInstanceEvent$];
        return merge(...events);
    }
    upload() {
        this.flowJs.upload();
    }
    cancel() {
        this.flowJs.cancel();
    }
    cancelFile(file) {
        file.flowFile.cancel();
    }
    pauseFile(file) {
        file.flowFile.pause();
        this.pauseOrResumeEvent$.next();
    }
    resumeFile(file) {
        file.flowFile.resume();
        this.pauseOrResumeEvent$.next();
    }
    listenForEvent(flow, eventName) {
        return fromEvent(flow, eventName).pipe(map((args) => ({
            type: eventName,
            event: args,
        })));
    }
}
FlowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.5", ngImport: i0, type: FlowDirective, deps: [{ token: FlowInjectionToken }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
FlowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.5", type: FlowDirective, selector: "[flowConfig]", inputs: { flowConfig: "flowConfig" }, exportAs: ["flow"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.5", ngImport: i0, type: FlowDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[flowConfig]',
                    exportAs: 'flow',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [FlowInjectionToken]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { flowConfig: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,